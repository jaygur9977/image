

import React, { useState } from 'react';
import axios from 'axios';
import { AiOutlineLoading3Quarters, AiOutlineDelete } from 'react-icons/ai';
import { v4 as uuidv4 } from 'uuid';
import { jsPDF } from 'jspdf';

const Home = () => {
  const [user, setUser] = useState(null);
  const [previewFiles, setPreviewFiles] = useState([]);
  const [uploadStatus, setUploadStatus] = useState('');
  const [loading, setLoading] = useState(false);
  const [extractedTexts, setExtractedTexts] = useState({});
  const [generatedAnswers, setGeneratedAnswers] = useState({});
  const [purpose, setPurpose] = useState('');
  const [answerType, setAnswerType] = useState('');
  const [projectDetails, setProjectDetails] = useState({ paragraphs: 3, words: 300 });
  const [generatingAnswer, setGeneratingAnswer] = useState(false);




  // File handling functions
  const handleFileChange = (event) => {
    const files = event.target.files;
    if (files && files.length > 0) {
      const newPreviewFiles = Array.from(files).map(file => ({
        id: uuidv4(),
        name: file.name,
        url: URL.createObjectURL(file),
        uploaded: false,
      }));
      setPreviewFiles(prev => [...prev, ...newPreviewFiles]);
    }
  };

  const handleDeletePhoto = (id) => {
    setPreviewFiles(prev => prev.filter(file => file.id !== id));
  };

  const handleUpload = async () => {
    setLoading(true);
    const formData = new FormData();
    const files = document.querySelector('input[type="file"]').files;

    Array.from(files).forEach(file => formData.append('files', file));
    if (user) formData.append('userId', user.sub);

    try {
      const response = await axios.post('https://image-backed.onrender.com/upload', formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });

      setUploadStatus('Files uploaded successfully!');
      setPreviewFiles(prev => prev.map(file => ({ ...file, uploaded: true })));

      const texts = {};
      response.data.savedFiles.forEach(file => {
        texts[file.originalName] = file.extractedText;
      });
      setExtractedTexts(texts);
    } catch (error) {
      console.error(error);
      setUploadStatus('Upload failed. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (fileName, text) => {
    const userQuestion = document.querySelector(`textarea[name="question-${fileName}"]`).value;
    if (!userQuestion.trim()) return alert('Please enter a question');

    try {
      const response = await axios.post('https://image-backed.onrender.com/api/ask', {
        text,
        question: userQuestion,
        purpose,
        answerType,
        projectDetails,
      });
      setGeneratedAnswers((prevAnswers) => ({
        ...prevAnswers,
        [fileName]: response.data.answer,
      }));
    } catch (error) {
      console.error('Error submitting question:', error);
      alert('Failed to get answer from AI');
    } finally {
      setGeneratingAnswer(false);
    }
  };

  const downloadAnswer = (fileName, answer) => {
    const doc = new jsPDF();

    doc.setProperties({
      title: `Analysis for ${fileName}`,
      subject: 'AI Document Analysis',
      author: 'AI Document Analyzer',
    });

    doc.setFontSize(16);
    doc.setTextColor(40, 40, 40);
    doc.text(`Document: ${fileName}`, 15, 20);

    doc.setFontSize(14);
    doc.text('AI Analysis Results:', 15, 30);

    doc.setFontSize(12);
    doc.setTextColor(60, 60, 60);

    const splitText = doc.splitTextToSize(answer, 180);
    let yPosition = 40;

    splitText.forEach((line) => {
      if (yPosition > 270) {  // Check if we need a new page
        doc.addPage();
        yPosition = 20;  // Reset Y position for new page
      }
      doc.text(line, 15, yPosition);
      yPosition += 7;
    });

    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text('Generated by AI Document Analyzer',
      doc.internal.pageSize.width / 2,
      doc.internal.pageSize.height - 10,
      { align: 'center' }
    );

    doc.save(`${fileName.replace(/\.[^/.]+$/, "")}-analysis.pdf`);
  };



  return (
    <div className="min-h-screen bg-gray-900 flex flex-col items-center justify-center relative overflow-hidden pt-6">
      <div className="absolute top-0 left-0 w-full h-full overflow-hidden">
        <div className="absolute -top-20 -left-20 w-96 h-96 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full opacity-20 animate-float"></div>
        <div className="absolute -bottom-20 -right-20 w-96 h-96 bg-gradient-to-r from-green-400 to-teal-500 rounded-full opacity-20 animate-float-reverse"></div>
      </div>

      <div className="relative z-10 text-center pb-4 text-gray-500 w-full">
        <h1 className="text-6xl sm:text-8xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-purple-600 animate-text-glow">
          AI-Powered Image Recognizer
        </h1>

        <p className="mt-6 text-xl sm:text-2xl text-gray-400 max-w-2xl mx-auto animate-fade-in">
          Upload images, extract text, and get AI-powered answers
        </p>

        <div className="mt-8">
          <h2 className="text-2xl font-semibold text-gray-300 mb-4">What is the purpose?</h2>
          <div className="flex flex-wrap gap-4 justify-center">
            {['education', 'finance', 'health'].map((option) => (
              <button
                key={option}
                onClick={() => setPurpose(option)}
                className={`px-6 py-3 text-lg font-semibold rounded-lg transition-all duration-300 ${purpose === option
                  ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white ring-4 ring-blue-400'
                  : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                  }`}
              >
                {option.charAt(0).toUpperCase() + option.slice(1)}
              </button>
            ))}
          </div>
        </div>
        {purpose === 'education' && (
          <div className="mt-8">
            <h2 className="text-2xl font-semibold text-gray-300 mb-4">Answer Type</h2>
            <div className="flex flex-wrap gap-4 justify-center">
              {['short', 'one-word', 'long', 'project'].map((type) => (
                <button
                  key={type}
                  onClick={() => setAnswerType(type)}
                  className={`px-6 py-3 text-lg font-semibold rounded-lg transition-all duration-300 ${answerType === type
                    ? 'bg-gradient-to-r from-green-600 to-teal-600 text-white ring-4 ring-green-400'
                    : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                    }`}
                >
                  {type.split('-').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}
                </button>
              ))}
            </div>
          </div>
        )}

        {answerType === 'project' && (
          <div className="mt-8">
            <h2 className="text-2xl font-bold text-gray-300 mb-4">Project Details</h2>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <div className="p-4 bg-gray-800 rounded-lg">
                <label className="block text-gray-400 mb-2">Number of Paragraphs (max 10)</label>
                <input
                  type="number"
                  min="1"
                  max="10"
                  className="p-2 rounded-lg bg-gray-700 text-white w-full"
                  value={projectDetails.paragraphs}
                  onChange={(e) => {
                    const value = Math.min(10, Math.max(1, parseInt(e.target.value) || 1));
                    setProjectDetails({
                      ...projectDetails,
                      paragraphs: value
                    })
                  }}
                />
              </div>
              <div className="p-4 bg-gray-800 rounded-lg">
                <label className="block text-gray-400 mb-2">Number of Words (max 2000)</label>
                <input
                  type="number"
                  min="1"
                  max="2000"
                  className="p-2 rounded-lg bg-gray-700 text-white w-full"
                  value={projectDetails.words}
                  onChange={(e) => {
                    const value = Math.min(2000, Math.max(1, parseInt(e.target.value) || 1));
                    setProjectDetails({
                      ...projectDetails,
                      words: value
                    })
                  }}
                />
              </div>
            </div>
          </div>
        )}

        <div className="mt-12 animate-fade-in-up">
          <label className="inline-flex items-center px-6 py-3 bg-gradient-to-r from-gray-600 to-gray-700 text-white rounded-lg cursor-pointer hover:from-gray-500 hover:to-gray-600 transition-all">
            <span className="mr-2">üìÅ</span> Select Files
            <input
              type="file"
              className="hidden"
              multiple
              onChange={handleFileChange}
              accept="image/*"
            />
          </label>
        </div>

        {previewFiles.length > 0 && (
          <div className="mt-8 w-full max-w-6xl mx-auto">
            <h2 className="text-2xl font-semibold text-gray-300 mb-4">Your Files</h2>
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
              {previewFiles.map((file) => (
                <div key={file.id} className="relative aspect-square group">
                  <img
                    src={file.url}
                    alt={file.name}
                    className={`w-full h-full object-cover rounded-lg ${file.uploaded ? 'opacity-50' : 'group-hover:opacity-80'}`}
                  />
                  <div className="absolute bottom-0 left-0 right-0 bg-black bg-opacity-70 text-white p-2 text-sm truncate">
                    {file.name}
                  </div>
                  <button
                    onClick={() => handleDeletePhoto(file.id)}
                    className="absolute top-2 right-2 p-2 bg-red-600 rounded-full hover:bg-red-700 transition-all opacity-0 group-hover:opacity-100"
                  >
                    <AiOutlineDelete className="text-white" />
                  </button>
                </div>
              ))}
            </div>

            <button
              onClick={handleUpload}
              disabled={loading || previewFiles.every(f => f.uploaded)}
              className={`mt-6 px-8 py-3 text-lg font-semibold rounded-lg transition-all flex items-center justify-center gap-2 mx-auto ${loading || previewFiles.every(f => f.uploaded)
                ? 'bg-gray-600 cursor-not-allowed'
                : 'bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white'
                }`}
            >
              {loading ? (
                <>
                  <AiOutlineLoading3Quarters className="animate-spin" />
                  Uploading...
                </>
              ) : (
                'Upload Files'
              )}
            </button>
          </div>
        )}

        {Object.keys(extractedTexts).length > 0 && (
          <div className="mt-8 w-full max-w-4xl mx-auto">
            <h2 className="text-2xl font-semibold text-gray-300 mb-6">Ask Questions</h2>
            {Object.entries(extractedTexts).map(([fileName, text]) => (
              <div key={fileName} className="mb-8 bg-gray-800 rounded-lg p-6 shadow-lg">
                <h3 className="text-xl font-semibold text-gray-300 mb-2">{fileName}</h3>
                <div className="bg-gray-700 p-4 rounded-lg mb-4 max-h-40 overflow-y-auto">
                  <pre className="text-gray-300 whitespace-pre-wrap">{text}</pre>
                </div>
                <textarea
                  className="w-full bg-gray-700 text-white border border-gray-600 rounded-lg p-4 mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  name={`question-${fileName}`}
                  placeholder="Ask your question about this text..."
                  rows="3"
                />
                <button
                  onClick={() => handleSubmit(fileName, text)}
                  disabled={generatingAnswer}
                  className={`px-6 py-3 bg-gradient-to-r from-green-600 to-teal-600 text-white font-semibold rounded-lg hover:from-green-700 hover:to-teal-700 transition-all duration-300 flex items-center justify-center gap-2 ${generatingAnswer ? 'opacity-70 cursor-not-allowed' : ''
                    }`}
                >
                  {generatingAnswer ? (
                    <>
                      <AiOutlineLoading3Quarters className="animate-spin" />
                      Generating...
                    </>
                  ) : (
                    'Get Additional Answer'
                  )}
                </button>
                {generatedAnswers[fileName] && (
                  <div className="mt-4 bg-gray-700 p-4 rounded-lg border border-gray-600">
                    <h4 className="text-lg font-semibold text-gray-300 mb-2">AI Answer:</h4>
                    <p className="text-gray-200 whitespace-pre-wrap">{generatedAnswers[fileName]}</p>
                  </div>
                )}
              </div>
            ))}
            {Object.keys(generatedAnswers).length > 0 && (
              <div className="mt-8 mb-12 text-center">
                <button
                  onClick={downloadPdf}
                  className="px-8 py-3 bg-gradient-to-r from-yellow-600 to-orange-600 text-white font-semibold rounded-lg hover:from-yellow-700 hover:to-orange-700 transition-all shadow-lg"
                >
                  Download PDF Report
                </button>
                <p className="mt-2 text-gray-400">Answers will be properly formatted with dynamic spacing</p>
              </div>
            )}
          </div>
        )}

        {uploadStatus && (
          <div className={`mt-4 text-lg font-semibold ${uploadStatus.includes('success') ? 'text-green-500' : 'text-red-500'
            }`}>
            {uploadStatus}
          </div>
        )}
      </div>

      <footer className="w-full text-center text-gray-600 py-4 mt-auto">
        ¬© {new Date().getFullYear()} AI Document Analyzer
      </footer>
    </div>
  );
};

export default Home;
